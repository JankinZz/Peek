# Safari AI 总结插件 - 产品需求文档(PRD) 

## 1. 文档信息

| 文档信息 | 描述 |
|---------|------|
| 文档名称 | Safari AI 总结插件产品需求文档 |
| 版本号   | v1.3.0 |
| 作者     | [Jan] |
| 创建日期 | [2月25日] |
| 最新更新 | [3月15日] |
| 状态     | 发布版 |

## 2. 产品概述

### 2.1 产品背景

Safari用户在日常浏览过程中经常遇到信息过载的问题，尤其是面对长文章或视频内容时，难以快速获取核心信息。现有的浏览器扩展功能有限，不能充分利用AI技术为用户提供个性化的内容总结服务。我们需要开发一款智能的内容总结插件，帮助用户提升信息获取效率。

### 2.2 产品目标

开发一款基于Safari Userscripts的AI内容总结插件，能够智能分析网页文本和视频内容，并提供简洁明了的摘要。用户可以通过对话方式进一步探索内容细节，获得便捷的浏览体验。插件采用简洁设计原则，所有配置参数在代码中硬编码，确保用户专注于内容总结体验而非设置调整。插件需兼容Safari 18及以上版本。

### 2.3 目标用户

- 信息工作者：经常需要阅读大量文章和资料的专业人士
- 学生和研究人员：需要快速总结学习资料的用户
- 普通网络用户：想要快速了解文章或视频核心内容的用户
- 自媒体工作者：需要快速了解行业内容的创作者

### 2.4 成功指标

- 总结准确率：生成摘要与原文核心内容的匹配度达到85%以上
- 用户体验流畅度：UI响应时间不超过300ms，摘要生成平均等待时间控制在5秒以内
- 兼容性：在Safari 18+版本上100%正常运行
- 会话稳定性：多轮对话中不出现上下文丢失情况

## 3. 用户场景与功能概述

### 3.1 核心用户场景

**场景一：长文章总结**
用户浏览到一篇长文章，想要快速了解其主要内容和观点，点击总结按钮后获得精简准确的摘要。

**场景二：视频内容总结**
用户在视频网站(如YouTube、Bilibili)观看视频，希望无需完整观看即可了解主要内容，通过插件一键获取视频内容摘要。

**场景三：内容探索互动**
用户获得内容摘要后，希望进一步了解特定细节，通过对话方式询问AI助手并获得相关信息。

**场景四：快速掌握关键要点**
用户希望快速了解文章的核心要点和观点，通过"要点"标签页直接访问提炼过的关键信息和建议问题。

### 3.2 产品功能概述

1. **内容智能提取与总结**：自动分析网页或视频内容并生成摘要
2. **关键要点提取**：识别并展示内容中的核心要点和推荐问题
3. **交互式对话**：基于内容进行问答互动
4. **会话状态管理**：基于URL保存和恢复当前页面的信息
5. **多级摘要**：支持简短和详细两种摘要模式
6. **标签式内容组织**：通过标签页区分总结、要点和对话功能

## 4. 功能详细需求

### 4.1 内容提取与总结

#### 4.1.1 文本内容提取
- **描述**：从当前网页提取主要文本内容
- **详细要求**：
  - **增强型内容识别算法**：
    - 首先尝试使用语义标签（article, main, [role="main"]）定位内容
    - 其次基于文本密度和段落分布进行内容区域识别
    - 最后使用启发式算法找出最可能包含主要内容的DOM节点
  - **内容清洗机制**：
    - 移除导航栏、广告、评论等非核心内容
    - 过滤常见干扰元素（cookie提示、分享按钮、相关文章等）
    - 保留关键内容结构（标题、小标题、正文段落）
  - **长内容处理**：
    - 对超过10000字符的文档实现智能截断
    - 截断时保留首部和尾部内容，确保总结的完整性
  - **特殊页面适配**：
    - 支持Single Page Application(SPA)页面内容提取
    - 适配常见的付费墙和弹窗干扰

#### 4.1.2 视频内容提取
- **描述**：从视频网站提取视频内容信息
- **详细要求**：
  - 支持YouTube、Bilibili、Vimeo等主流视频平台
  - 提取视频标题、描述、上传者、发布时间等元数据
  - **技术实现**：
    - 使用DOM选择器定位视频元数据元素
    - 针对不同视频平台实现独立的提取逻辑
    - 当视频平台更新界面结构时提供降级提取策略
  - **字幕获取策略**：
    - 对于YouTube视频：利用当前可见字幕元素
    - 对于Bilibili视频：尝试获取弹幕内容作为辅助信息
    - 当无法获取字幕时，明确告知用户并基于可获取的视频元数据进行总结
  - **视频上下文分析**：
    - 结合视频标题、描述和可用评论进行内容理解
    - 提取视频分类和标签信息作为主题提示

#### 4.1.3 内容总结生成
- **描述**：仅在用户点击总结按钮后，将提取的内容发送至AI服务获取摘要
- **详细要求**：
  - **触发机制**：
    - 总结功能仅由用户点击总结按钮明确触发，不自动执行
    - 每次页面刷新或导航后，需要用户重新点击总结按钮
    - 提供明确的视觉反馈表明总结过程已开始
  - **API多样性支持**：
    - 支持OpenAI API格式（完全兼容）
    - 支持Google Gemini API格式
    - 在CONFIG中预设不同API提供商的接口格式
  - **总结长度控制**：
    - 默认生成约500字的简洁摘要
    - 支持生成更详细的扩展摘要(约1000字)
    - 根据原文长度智能调整摘要长度 
  - **总结质量优化**：
    - 保留原始文本的核心观点和逻辑结构
    - 总结格式必须包含：核心主题概述(1-2句)、主要段落(3-5个)、简短结论
    - 使用明确的小标题划分摘要内容区块
  - **API错误处理**：
    - 实现超时重试机制（最多3次，间隔递增）
    - 针对不同错误类型提供用户友好的错误信息
    - 当API请求失败时提供降级功能（如仅展示原文开头部分）

#### 4.1.4 关键要点提取
- **描述**：从内容中提取3-5个关键要点和推荐问题
- **详细要求**：
  - **要点结构化处理**：
    - 每个要点包含标题和简短说明
    - 以卡片形式展示，支持展开/折叠
    - 使用JSON结构化格式规范化要点输出
  - **推荐问题生成**：
    - 根据内容生成3-5个相关问题建议
    - 问题多样性确保（概念性问题、细节性问题、应用性问题）
    - 生成与内容高度相关且有价值的问题
  - **并行请求优化**：
    - 与总结请求并行处理，减少等待时间
    - 独立的错误处理机制，确保单个请求失败不影响整体功能
  - **结果缓存**：
    - 基于URL缓存请求结果，避免重复API调用
    - 当网页内容发生重大变化时自动失效缓存

### 4.2 交互式对话功能

#### 4.2.1 基于内容的问答
- **描述**：允许用户针对总结内容提问并获得回答
- **详细要求**：
  - **对话上下文管理**：
    - 支持至少5轮连续对话，保持上下文连贯性
    - 实现滑动窗口上下文管理，避免超出模型上下文限制
    - 针对不同主题的问题智能切换上下文
  - **答案质量优化**：
    - AI回答基于原始内容和总结内容
    - 明确区分直接引用原文内容和AI推断内容
    - 对于无法基于当前内容回答的问题，明确告知用户限制
  - **交互体验增强**：
    - 问题输入支持自动补全/建议功能
    - 实现输入中的停止生成功能
    - 支持答案内容的复制和分享
  - **多模式对话**：
    - 支持基础问答模式：直接回答用户问题
    - 支持解释模式：针对总结中特定概念进行详细解释
    - 支持探索模式：根据用户兴趣拓展相关话题

#### 4.2.2 会话状态管理
- **描述**：仅在当前网页浏览会话中保存总结、要点和对话历史
- **详细要求**：
  - **临时会话存储**：
    - 使用sessionStorage存储会话数据，确保页面刷新或关闭后会话自动清除
    - 不进行长期存储，每次页面刷新或跳转到新页面时重新开始
    - 当网页刷新或用户导航至其他页面时，所有历史数据清除
  - **会话唯一标识**：
    - 基于完整URL创建会话标识，确保每个页面有独立会话
    - 不进行URL参数处理或路径匹配，保持简单明确的标识规则
  - **会话生命周期管理**：
    - 会话创建：仅在用户点击总结按钮后创建
    - 会话更新：仅在当前页面浏览期间有效
    - 会话销毁：页面刷新、关闭或导航时自动销毁
    - 禁止跨页面会话恢复
  - **会话数据分层存储**：
    - 原始内容：SESSION_KEYS.ORIGINAL_CONTENT
    - 内容摘要：SESSION_KEYS.SUMMARY
    - 要点信息：SESSION_KEYS.KEYPOINTS
    - 对话历史：SESSION_KEYS.CONVERSATION
    - 活动标签：SESSION_KEYS.ACTIVE_TAB

### 4.3 API配置与管理

#### 4.3.1 多API服务支持
- **描述**：支持多种AI API服务
- **详细要求**：
  - **OpenAI API支持**：
    - 完整支持OpenAI Chat Completions API格式
    - 支持temperature, max_tokens等参数控制
    - 支持system, user角色消息格式
  - **Google Gemini API支持**：
    - 支持Gemini API请求格式
    - 适配Gemini特有参数和响应格式
    - 智能处理两种API格式间的差异
  - **API模式切换**：
    - 在CONFIG.apiMode中设置当前使用的API类型
    - 根据选择的API模式动态调整请求格式和参数
    - 预设多种API端点配置

#### 4.3.2 API参数优化
- **描述**：优化AI生成参数配置
- **详细要求**：
  - **参数预设**：
    - 温度值(temperature)：0.6，保持输出稳定性
    - 最大令牌数(max_tokens)：1000（普通摘要），2000（详细摘要）
    - top_p值：0.9，平衡创造性与精确性
  - **提示词工程**：
    - 总结提示词：明确指定格式、结构和长度要求
    - 要点提示词：要求生成结构化JSON数据
    - 对话提示词：引导模型基于原始内容回答问题
  - **响应解析**：
    - 针对不同API响应格式实现统一解析接口
    - 处理可能的格式错误和不完整响应
    - 标准化输出格式

#### 4.3.3 错误处理与恢复
- **描述**：实现健壮的API调用错误处理
- **详细要求**：
  - **错误分类与处理**：
    - 网络错误：自动重试3次，间隔递增（1秒、3秒、5秒）
    - 认证错误：显示友好错误提示，指导用户配置正确的API密钥
    - 资源限制错误：提供内容分段处理选项
    - 服务器错误：等待短暂时间后重试
  - **用户友好的错误提示**：
    - API密钥无效: "API密钥无效，请在CONFIG.apiKey中填入正确的API密钥"
    - 上下文长度超限: "内容过长，超出模型处理限制"
    - 请求频率限制: "API调用频率超限，请稍后再试"
    - 网络连接失败: "网络连接失败，请检查您的网络并确保API端点可访问"
  - **降级策略**：
    - 当API请求完全失败时，提供基本内容预览
    - 实现本地内容缓存，允许查看之前的成功结果
    - 提供重试选项，允许用户手动触发重试

### 4.4 用户界面与体验

#### 4.4.1 总结按钮与交互
- **描述**：浮动在页面右下角的总结触发按钮
- **详细要求**：
  - **按钮设计**：
    - 固定大小：50px × 50px
    - 位置：右下角，距离边缘20px
    - 样式：正方形按钮，圆角8px，蓝色背景(#4285f4)
    - 图标：使用简洁的文档/摘要SVG图标
  - **交互状态**：
    - 默认状态：静态图标
    - 悬停状态：轻微放大(1.05倍)，背景色变亮
    - 点击状态：轻微缩小(0.95倍)，提供按下反馈
    - 加载状态：显示旋转动画
  - **辅助功能**：
    - 提供tooltip提示("AI内容总结")
    - 支持键盘访问(tab导航和enter触发)
    - 适当对比度确保可视性

#### 4.4.2 对话框界面设计
- **描述**：显示总结内容和交互功能的主要界面
- **详细要求**：
  - **尺寸与位置**：
    - 宽度：固定380px（响应式：小屏幕为85vw）
    - 高度：视窗高度的1/6（约16.7%），最小高度180px
    - 位置：固定在页面右下角，距底部30px，右侧30px
  
  - **结构组织**：
    - 顶部：标题栏(38px高)，包含标题和控制按钮
    - 中部：标签栏(38px高)，包含"总结"、"要点"、"对话"三个标签
    - 主体：内容区域，根据当前标签显示不同内容
    - 底部：操作区域，根据当前标签显示不同操作选项
  
  - **视觉风格**：
    - 主色调：#4285f4（Google蓝）
    - 背景色：#ffffff（白色，深色模式：#333333）
    - 文本色：#333333（深灰，深色模式：#f5f5f5）
    - 边框半径：10px（顶层组件），8px（内部元素）
    - 阴影效果：0 5px 20px rgba(0,0,0,0.3)

  - **响应式设计**：
    - 小屏适配：宽度从固定380px变为85vw
    - 移动设备优化：增大点击区域，优化触摸交互
    - 横向/纵向屏幕自适应

  - **深色模式支持**：
    - 自动检测系统深色模式并适配
    - 颜色、阴影、对比度针对深色模式优化
    - 所有组件同时支持深色/浅色两种模式

#### 4.4.3 内容显示与滚动机制
- **描述**：确保内容正确显示和滚动体验
- **详细要求**：
  - **文本显示优化**：
    - 使用系统字体栈确保各平台最佳显示效果
    - 行高设置为1.5，提升长文本可读性
    - 段落间距统一为16px，提升内容分隔清晰度
  
  - **溢出处理与滚动**：
    - 强制实现文本自动换行（word-wrap: break-word; overflow-wrap: break-word;）
    - 垂直方向实现平滑滚动（overflow-y: auto; scroll-behavior: smooth;）
    - 禁止水平方向滚动（overflow-x: hidden;）
    - 自定义滚动条样式，确保与Safari原生风格匹配
  
  - **内容区域设计**：
    - 内容区域内边距统一为15px
    - 最大高度限制为容器高度减去头部区域
    - 底部预留10px空间，避免内容紧贴容器底部
  
  - **技术实现**：
    - 使用CSS Flexbox布局确保弹性响应
    - 避免绝对定位导致的滚动问题
    - 针对Safari特有的滚动表现进行适配

#### 4.4.4 富文本与格式化
- **描述**：支持多种文本格式化元素，提升内容可读性
- **详细要求**：
  - **Markdown语法支持**：
    - 粗体：`**文本**` → `<span class="md-bold">文本</span>`
    - 斜体：`*文本*` → `<span class="md-italic">文本</span>`
    - 下划线：`__文本__` → `<span class="md-underline">文本</span>`
    - 高亮：`==文本==` → `<span class="md-highlight">文本</span>`
    - 行内代码：`` `代码` `` → `<code class="md-code">代码</code>`
    - 引用块：`> 引用内容` → `<div class="md-blockquote">引用内容</div>`
    - 链接：`[文本](链接)` → `<a href="链接" class="md-link" target="_blank">文本</a>`
    - 列表项：`- 项目` → `<div class="md-list-item">项目</div>`
  
  - **格式化实现**：
    - 使用正则表达式处理Markdown语法
    - 转换为HTML标签并应用对应CSS类
    - 确保HTML安全性，避免XSS风险
  
  - **富文本增强**：
    - 支持表格基础格式化
    - 支持简单的代码块语法高亮
    - 自动识别URL并转为可点击链接
    - 支持简单的数学公式显示(可选)

#### 4.4.5 内容标签页实现

##### 4.4.5.1 "总结"标签页
- **内容组织**：
  - 显示网页/视频的核心总结
  - 包含标题、概述和分段内容
  - 底部提供详细/简短摘要切换选项
- **交互功能**：
  - 文本可选择复制
  - 支持鼠标和触控滚动
  - "查看更详细摘要"/"查看简短摘要"切换按钮
- **技术实现**：
  - 使用overflow-y: auto实现滚动
  - 文本容器使用flex: 1确保自适应高度
  - 底部操作区固定显示

##### 4.4.5.2 "要点"标签页
- **内容组织**：
  - 3-5个核心要点卡片
  - 每个卡片默认显示标题，可展开查看详情
  - 底部显示3-5个推荐问题按钮
- **交互功能**：
  - 点击卡片展开/折叠详细内容
  - 点击推荐问题自动切换到对话标签并发送
  - 支持键盘导航和操作
- **视觉设计**：
  - 卡片使用轻微阴影和左侧强调色边框
  - 展开/折叠状态有明确视觉区分
  - 推荐问题使用轻微突出的按钮样式

##### 4.4.5.3 "对话"标签页
- **内容组织**：
  - 顶部显示历史对话内容（气泡式布局）
  - 底部固定显示问题输入区域
  - 用户问题右对齐，AI回答左对齐
- **交互功能**：
  - 支持Enter键发送问题
  - 自动滚动到最新消息
  - 支持复制对话内容
  - 长按/右键菜单提供更多操作选项
- **技术实现**：
  - 使用flex-direction: column排列对话内容
  - 自动检测新消息并滚动(scrollTop = scrollHeight)
  - 输入区域固定在底部(position: sticky)

## 5. 非功能需求

### 5.1 性能优化
- **UI响应时间**：所有UI交互响应时间不超过150ms
- **内容提取优化**：
  - 使用异步处理避免阻塞主线程
  - 针对大型页面实现分段处理
  - 使用requestIdleCallback优化处理时机
- **API请求策略**：
  - 并行请求减少总等待时间
  - 结果缓存避免重复请求
  - 请求超时设置和自动重试

### 5.2 兼容性与适配
- **Safari版本**：完全支持Safari 18+版本
- **操作系统**：支持macOS最新版本和iOS最新版本
- **屏幕适配**：
  - 支持Retina显示屏
  - 支持多种屏幕尺寸和分辨率
  - 适配笔记本和移动设备显示
- **Web兼容性**：
  - 支持现代Web标准网页
  - 兼容Single Page Applications(SPA)
  - 处理复杂DOM结构和动态内容

### 5.3 安全考量
- **数据处理**：
  - API密钥仅在本地存储
  - 不收集或上传用户个人信息
  - 页面内容仅用于API请求，不做其他用途
- **内容安全**：
  - 对API返回内容进行XSS过滤
  - 安全处理用户输入，避免注入风险
  - 使用Content Security Policy增强安全性
- **权限使用**：
  - 仅请求必要的页面访问权限
  - 明确告知用户数据使用方式
  - 不干扰页面原有功能和安全机制

### 5.4 可访问性支持
- **键盘操作**：
  - 完整支持Tab键导航
  - 支持Esc键关闭对话框
  - 支持方向键和Enter键操作
- **屏幕阅读**：
  - 添加适当的ARIA属性
  - 提供语义化结构支持屏幕阅读器
  - 确保所有交互元素有适当的角色描述
- **视觉辅助**：
  - 所有文本元素符合WCAG AA标准对比度
  - 交互元素状态变化清晰可辨
  - 错误信息提供视觉和文本双重提示

## 6. 实施计划

### 6.1 开发阶段划分
1. **基础框架搭建**
   - 实现核心UI组件和基本交互
   - 完成内容提取和API请求基础功能
   - 建立会话管理机制

2. **功能完善阶段**
   - 实现多API支持和错误处理
   - 完善内容提取算法优化
   - 增强用户界面交互体验

3. **优化与测试阶段**
   - 性能优化和兼容性测试
   - 用户体验改进
   - Bug修复和边缘情况处理

### 6.2 测试策略
- **单元测试**：核心功能模块独立测试
- **集成测试**：模块间交互和数据流测试
- **兼容性测试**：不同Safari版本和操作系统测试
- **性能测试**：响应时间和资源占用测试
- **用户测试**：真实用户场景下的功能验证

### 6.3 部署与发布
- **打包方式**：作为Safari Userscripts插件发布
- **安装指南**：提供清晰的用户安装说明
- **版本控制**：遵循语义化版本规范
- **更新机制**：提供版本检查和更新提示

## 术语表
- **Userscripts**: Safari的用户脚本功能，允许用户自定义脚本增强浏览体验
- **API**: 应用程序接口，本插件主要指AI服务提供的接口
- **令牌(Token)**: AI模型处理文本的基本单位，通常一个单词约为1.3个令牌
- **温度值(Temperature)**: 控制AI生成内容多样性的参数，较低值生成更确定性内容
- **会话存储(SessionStorage)**: 浏览器会话存储，数据在会话结束后清除
- **本地存储(LocalStorage)**: 浏览器持久化存储，数据保持到被明确删除
- **URL哈希**: 基于URL生成的唯一标识符，用于区分不同页面的会话
- **标签页(Tab)**: 用户界面设计模式，通过不同标签切换不同内容视图
- **关键要点(Keypoints)**: 从内容中提取的核心观点或重要信息
- **深色模式(Dark Mode)**: 使用深色背景和浅色文本的UI显示模式
- **响应式设计(Responsive Design)**: 根据设备尺寸自动调整布局的设计方法
- **降级策略(Fallback Strategy)**: 当首选功能不可用时的备选处理方案
